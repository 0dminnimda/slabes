big modulo_from_divided big number, big divisor, big divided begin
    return number - (divided \ divisor),
. end,

big modulo big number, big divisor begin
    big divided << 0,
    divided << number / divisor,
    return modulo_from_divided(number  divisor  divided),
. end,

big main begin
    generate_maze(),

    big count << +0,
    until count => FVV do
        big index << 0,
        big value << 6,
        value << sonar,

        tin contin << 1,
        big bit << 1,
        until contin == 0 do  # 2^5
            big next_value << 0,
            big mod << 0,
            next_value << value / 2,
            mod << modulo_from_divided(value 2 next_value),
            value << next_value,

            check mod == 1 do
                contin << 0,
            .,

            check contin do
                bit << bit + bit,
                check bit => 10 do
                    contin << 0,
                .,
            .,
        .,

        check bit == 1 do rl, rl.,
        check bit == 2 do rl.,
        check bit == 4 do .,
        check bit == 8 do rr.,
        check bit == G do rr, rr.,
        check bit == 10 do rr, rr, rr.,
        go,

        count << count + 1,
        check compass do count << G00.,
    .,
. end,
.
