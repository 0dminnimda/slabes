big ggg begin
    ti ti_zero << 0,
    sma sma_zero << 0,
    no no_zero << 0,
    bi bi_zero << 0,

    ti a << 3,
    sma b << 3,
    no c << 3,
    bi dd << 3,
    assert(a == 1),
    assert(b == 3),
    assert(c == 3),
    assert(dd == 3),
    c << a << 6 >> b >> a >> dd << 8 >> b >> b,
    assert(a == 1),
    assert(b == 8),
    assert(c == 6),
    assert(dd == 6),

    b << b + 1,
    assert(a == 1),
    assert(b == 9),
    assert(c == 6),
    assert(dd == 6),

    assert((a / ti_zero) == 1),
    assert((a / sma_zero) == F),
    assert((a / no_zero) == FV),
    assert((a / bi_zero) == FVV),

    assert((b / ti_zero) == F),
    assert((b / sma_zero) == F),
    assert((b / no_zero) == FV),
    assert((b / bi_zero) == FVV),

    assert((c / ti_zero) == FV),
    assert((c / sma_zero) == FV),
    assert((c / no_zero) == FV),
    assert((c / bi_zero) == FVV),

    assert((dd / ti_zero) == FVV),
    assert((dd / sma_zero) == FVV),
    assert((dd / no_zero) == FVV),
    assert((dd / bi_zero) == FVV),

    ti over_ti << 0,
    sma over_sma << 0,
    no over_no << 0,
    bi over_bi << 0,

    over_ti << over_ti + 1,
    over_ti << over_ti + 1,

    over_sma << over_sma + V,  # 31
    over_sma << over_sma + 1,

    over_no << over_no + VV,  # 1023
    over_no << over_no + 1,

    over_bi << over_bi + VVV,  # 32767
    over_bi << over_bi + 1,

    assert(over_ti == 1),
    assert(over_sma == F),
    assert(over_no == FV),
    assert(over_bi == FVV),

    ti over_ti_help << 1,
    sma over_sma_help << V,
    no over_no_help << VV,
    bi over_bi_help << VVV,
    ti over_help << 1,

    over_ti << 0,
    over_sma << 0,
    over_no << 0,
    over_bi << 0,

    over_ti << over_ti + over_ti_help,
    over_ti << over_ti + over_help,

    over_sma << over_sma + over_sma_help,  # 31
    over_sma << over_sma + over_help,

    over_no << over_no + over_bi_help,  # 1023
    over_no << over_no + over_help,

    over_bi << over_bi + over_bi_help,  # 32767
    over_bi << over_bi + over_help,

    assert(over_ti == 1),
    assert(over_sma == F),
    assert(over_no == FV),
    assert(over_bi == FVV),

    over_ti << over_ti_help,
    over_sma << over_sma_help,
    over_no << over_bi_help,
    over_bi << over_bi_help,

    assert((over_ti + over_help) == 1),
    assert((over_sma + over_help) == F),
    assert((over_no + over_help) == FV),
    assert((over_bi + over_help) == FVV),

    over_ti << over_sma,
    over_sma << over_no,
    over_no << over_bi,

    assert(over_ti == 1),
    assert(over_sma == F),
    assert(over_no == FV),
. end,


big ppp begin
    ti ti_zero << +0,
    sma sma_zero << +0,
    no no_zero << +0,
    bi bi_zero << +0,

    ti a << +3,
    sma b << +3,
    no c << +3,
    bi dd << +3,
    assert(a == +1),
    assert(b == +3),
    assert(c == +3),
    assert(dd == +3),
    c << a << +6 >> b >> a >> dd << +8 >> b >> b,
    assert(a == +1),
    assert(b == +8),
    assert(c == +6),
    assert(dd == +6),

    b << b + 1,
    assert(a == +1),
    assert(b == +9),
    assert(c == +6),
    assert(dd == +6),

    assert((a / ti_zero) == +1),
    assert((a / sma_zero) == +V),
    assert((a / no_zero) == +VV),
    assert((a / bi_zero) == +VVV),

    assert((b / ti_zero) == +V),
    assert((b / sma_zero) == +V),
    assert((b / no_zero) == +VV),
    assert((b / bi_zero) == +VVV),

    assert((c / ti_zero) == +VV),
    assert((c / sma_zero) == +VV),
    assert((c / no_zero) == +VV),
    assert((c / bi_zero) == +VVV),

    assert((dd / ti_zero) == +VVV),
    assert((dd / sma_zero) == +VVV),
    assert((dd / no_zero) == +VVV),
    assert((dd / bi_zero) == +VVV),

    ti over_ti << +0,
    sma over_sma << +0,
    no over_no << +0,
    bi over_bi << +0,

    over_ti << over_ti + +1,
    over_ti << over_ti + +1,

    over_sma << over_sma + +V,  # 31
    over_sma << over_sma + +1,

    over_no << over_no + +VV,  # 1023
    over_no << over_no + +1,

    over_bi << over_bi + +VVV,  # 32767
    over_bi << over_bi + +1,

    assert(over_ti == +1),
    assert(over_sma == +V),
    assert(over_no == +VV),
    assert(over_bi == +VVV),

    ti over_ti_help << +1,
    sma over_sma_help << +V,
    no over_no_help << +VV,
    bi over_bi_help << +VVV,
    ti over_help << +1,

    over_ti << 0,
    over_sma << 0,
    over_no << 0,
    over_bi << 0,

    over_ti << over_ti + over_ti_help,
    over_ti << over_ti + over_help,

    over_sma << over_sma + over_sma_help,  # 31
    over_sma << over_sma + over_help,

    over_no << over_no + over_bi_help,  # 1023
    over_no << over_no + over_help,

    over_bi << over_bi + over_bi_help,  # 32767
    over_bi << over_bi + over_help,

    assert(over_ti == +1),
    assert(over_sma == +V),
    assert(over_no == +VV),
    assert(over_bi == +VVV),

    over_ti << over_ti_help,
    over_sma << over_sma_help,
    over_no << over_bi_help,
    over_bi << over_bi_help,

    assert((over_ti + over_help) == +1),
    assert((over_sma + over_help) == +V),
    assert((over_no + over_help) == +VV),
    assert((over_bi + over_help) == +VVV),

    over_ti << over_sma,
    over_sma << over_no,
    over_no << over_bi,

    assert(over_ti == +1),
    assert(over_sma == +V),
    assert(over_no == +VV),
. end,


ti hhh begin
    ti ti_zero << -0,
    sma sma_zero << -0,
    no no_zero << -0,
    bi bi_zero << -0,

    ti a << -3,
    sma b << -3,
    no c << -3,
    bi dd << -3,
    assert(a == 0),
    assert(b == -3),
    assert(c == -3),
    assert(dd == -3),
    c << a << -6 >> b >> a >> dd << -8 >> b >> b,
    assert(a == 0),
    assert(b == -8),
    assert(c == -6),
    assert(dd == -6),

    a << a + 1,
    b << b + 1,
    assert(a == 1),
    assert(b == -7),
    assert(c == -6),
    assert(dd == -6),

    assert((a / ti_zero) == 1),
    assert((a / sma_zero) == F),
    assert((a / no_zero) == FV),
    assert((a / bi_zero) == FVV),

    assert((b / ti_zero) == -G),
    assert((b / sma_zero) == -G),
    assert((b / no_zero) == -G0),
    assert((b / bi_zero) == -G00),

    assert((c / ti_zero) == -G0),
    assert((c / sma_zero) == -G0),
    assert((c / no_zero) == -G0),
    assert((c / bi_zero) == -G00),

    assert((dd / ti_zero) == -G00),
    assert((dd / sma_zero) == -G00),
    assert((dd / no_zero) == -G00),
    assert((dd / bi_zero) == -G00),

    ti over_ti << -0,
    sma over_sma << -0,
    no over_no << -0,
    bi over_bi << -0,

    over_ti << over_ti - 1,
    over_ti << over_ti - 1,

    over_sma << over_sma - V,  # 31
    over_sma << over_sma - 1,

    over_no << over_no - VV,  # 1023
    over_no << over_no - 1,

    over_bi << over_bi - VVV,  # 32767
    over_bi << over_bi - 1,

    assert(over_ti == -0),
    assert(over_sma == -G),
    assert(over_no == -G0),
    assert(over_bi == -G00),

    ti over_ti_help << -1,
    sma over_sma_help << -V,
    no over_no_help << -VV,
    bi over_bi_help << -VVV,
    ti over_help << -1,

    over_ti << -0,
    over_sma << -0,
    over_no << -0,
    over_bi << -0,

    over_ti << over_ti + over_ti_help,
    over_ti << over_ti + over_help,

    over_sma << over_sma + over_sma_help,  # 31
    over_sma << over_sma + over_help,

    over_no << over_no + over_bi_help,  # 1023
    over_no << over_no + over_help,

    over_bi << over_bi + over_bi_help,  # 32767
    over_bi << over_bi + over_help,

    assert(over_ti == -0),
    assert(over_sma == -G),
    assert(over_no == -G0),
    assert(over_bi == -G00),

    over_ti << over_ti_help,
    over_sma << over_sma_help,
    over_no << over_bi_help,
    over_bi << over_bi_help,

    assert((over_ti + over_help) == 0),
    assert((over_sma + over_help) == -G),
    assert((over_no + over_help) == -G0),
    assert((over_bi + over_help) == -G00),

    over_ti << over_sma,
    over_sma << over_no,
    over_no << over_bi,

    assert(over_ti == -0),
    assert(over_sma == -G),
    assert(over_no == -G0),
. end,


bi guhh begin
    big a << 3,
    assert(0 <= a <= 5),
    a << -1,
    assert((a => 6) + (a <= -1)),
    a << 6,
    assert((a => 6) + (a <= -1)),
    a << 5,
    assert(0 <= a <= 5),
    a << 0,
    assert(0 <= a <= 5),
    # check 0 <= a <= 5 do
    #     print(a),
    # .,
    retur 5,
. end,


bi arr begin
    field bi no a << 3,
    assert(0 <= a[0 0] <= 5),
    a[0 0] << 10,
    assert(a[0 0] == 10),
    retur 5,
. end,


big main begin
    ppp(),
    ggg(),
    hhh(),
    # bug  c << a << -6 >> b >> a << -8 >> b >> b,

    assert(guhh() == 5),
. end,

.
