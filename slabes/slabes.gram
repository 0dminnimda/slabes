# PEG grammar for Slabes

@class SlabesParser

@header'''
#!/usr/bin/env python
# @generated by pegen from {filename}

import sys
import tokenize
import typing

from typing import Any, Optional

from pegen.parser import memoize, memoize_left_rec, logger
from . import ast_nodes as ast
from .parser_base import ParserBase as Parser, parser_main
'''


@trailer'''
if __name__ == '__main__':
    parser_main(SlabesParser)
'''


start: statements ENDMARKER

statements: statement*

statement: expr (',' expr)* '.'

expr:
    | term '+' expr
    | (sign sign)+ term '-' expr
    | term
    | declaration

declaration: type NAME+ '<<' expr

type: SMALL

sign:
    | '+'
    | '-'

term: 
    | factor '\\' term
    | factor '/' term
    | factor

factor:
    | '(' expr ')'
    | atom

atom:
    | NAME
    | NUMBER
