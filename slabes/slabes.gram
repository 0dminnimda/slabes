# PEG grammar for Slabes

@class SlabesParser

@header'''
#!/usr/bin/env python
# @generated by pegen from {filename}

import sys
import tokenize
import typing

from typing import Any, Optional

from pegen.parser import memoize, memoize_left_rec, logger
from . import ast_nodes as ast
from .parser_base import ParserBase as Parser, parser_main
'''


@trailer'''
if __name__ == '__main__':
    parser_main(SlabesParser)
'''


start: statements ENDMARKER

statements: statement*

statement: expr (',' expr)* '.'

expr:
    | atom
    | declaration

declaration: number_declaration

number_declaration:
    | number_type NAME+ '<<' signed_number
    | invalid_number_declaration

invalid_number_declaration:
    | number_type names=(keywords|NAME)+ '<<' signed_number {
        self.invalid_number_declaration_bad_names(names)
    }

number_type: TINY | SMALL | NORMAL | BIG

signed_number: sign? NUMBER

sign:
    | '+'
    | '-'

atom:
    | NAME
    | NUMBER

keywords: TINY | SMALL | NORMAL | BIG
